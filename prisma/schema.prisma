// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Library {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    name        String
    description String
    imageURL    String

    books Book[]
}

model Book {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    library   Library? @relation(fields: [libraryId], references: [id])
    libraryId Int?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    name        String
    description String
    imageURL    String

    note  Note?
    files FileUpload[]
}

model Note {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    book   Book @relation(fields: [bookId], references: [id])
    bookId Int  @unique

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    contentJSON String
    contentMD   String
}

model FileUpload {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    book   Book @relation(fields: [bookId], references: [id])
    bookId Int

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    questionAnswers QuestionAnswer[]
}

model QuestionAnswer {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    file   FileUpload @relation(fields: [fileId], references: [id])
    fileId Int

    question   String
    answerType String
    answer     String
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    libraries     Library[]
    books         Book[]
    notes         Note[]
    files         FileUpload[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
